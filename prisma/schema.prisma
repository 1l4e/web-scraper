// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id           String       @id @unique
  email        String       @unique
  auth_session Session[]
  key          Key[]
  collection   Collection[]
  bookmark     Bookmark[]
  role         ROLE         @default(USER)
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Scraper {
  id     String   @id @default(cuid())
  name   String
  data   Json
  source Source[]
}

model Source {
  id         String  @id @default(cuid())
  name       String
  url        String
  image      String?
  Manga      Manga[]
  active     Boolean @default(false)
  scraper    Scraper @relation(fields: [scraper_id], references: [id], onDelete: Cascade)
  scraper_id String
  cookie     String?
  csrf       String?
}

model Manga {
  id         String       @id @default(cuid())
  name       String
  url        String
  image      String?
  source     Source       @relation(fields: [source_id], references: [id], onDelete: Cascade)
  source_id  String
  chapter    Chapter[]
  collection Collection[]
}

model Chapter {
  id       String     @id @default(cuid())
  name     String
  url      String
  image    String?
  manga    Manga      @relation(fields: [manga_id], references: [id], onDelete: Cascade)
  manga_id String
  bookmark Bookmark[]
}

model Collection {
  id      String  @id @default(cuid())
  name    String
  image   String?
  user    User    @relation(references: [id], fields: [user_id], onDelete: Cascade)
  user_id String
  manga   Manga[]
}

model Bookmark {
  id      String    @id @default(cuid())
  name    String
  user    User      @relation(references: [id], fields: [user_id], onDelete: Cascade)
  user_id String
  chapter Chapter[]
}

enum ROLE {
  ADMIN
  USER
}
